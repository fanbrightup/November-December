"use strict";
const _ = require("lodash");
class EvaluationProfiler {
    constructor(options) {
        this.times = [];
        options = options || {};
        this.displayResults = options.displayResults === undefined ? true : options.displayResults;
    }
    average(input) {
        const instances = this.times.filter(data => data.input === input);
        return _.reduce(instances, (res, data) => res + data.delta) / instances.length;
    }
    start() {
        const profiler = this;
        return new class {
            evaluate(input) {
                profiler.startTime = Date.now();
                return input;
            }
        }
        ;
    }
    end() {
        const profiler = this;
        return new class {
            evaluate(input) {
                const endTime = Date.now(), delta = endTime - profiler.startTime;
                profiler.times.push({
                    delta: delta,
                    input: profiler.currentInput
                });
                if (profiler.displayResults)
                    console.log(`Command took ${delta} miliseconds to execute.`);
                return input;
            }
        }
        ;
    }
}
exports.EvaluationProfiler = EvaluationProfiler;
