
#user  nobody;
worker_processes  1;

#error_log  logs/error.log;
#error_log  logs/error.log  notice;
#error_log  logs/error.log  info;

#pid        logs/nginx.pid;


events {
    worker_connections  1024;
}


http {
    include       mime.types;
    default_type  application/octet-stream;

    #log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
    #                  '$status $body_bytes_sent "$http_referer" '
    #                  '"$http_user_agent" "$http_x_forwarded_for"';

    #access_log  logs/access.log  main;

    sendfile        on;
    #tcp_nopush     on;

    #keepalive_timeout  0;
    keepalive_timeout  65;

    #gzip  on;





server {
		client_max_body_size 4G;
		##注意80端口的占用问题
		listen  80;  ## listen for ipv4; this line is default and implied
		server_name    fan;  ##你的主机名或者是域名
		#root /home/try/Desktop;
		#    location / {
		#	 autoindex on; ##显示索引
		#         autoindex_exact_size off; ##显示大小
		#}
    			#	 autoindex_localtime on;   ##显示时间
			#  	file server  conf
			#   	location /{
			#    	autoindex on; ##显示索引
			#       root /home/try/Desktop;
    			#}

location /{
	proxy_pass http://127.0.0.1:8000;
}

# 这种方式的话,会使socket.io找不到,可以采用去掉其中的js匹配的方式来做,就可以解决io未定义的问题
#location ~* ^.+\.(css|txt|xml|swf|wav)$ {
#	root	/home/try/Desktop/November-December/week50/12-15/static;
#	expires    15s;
#}

# 匹配的规则与^~ 和/static/ 和 { 直接有没有空格没有关系
# ^~  ~ 在匹配以/static/开头的请求时,效果一样
# 主要还是我当时将路径写错一个字母,而且最后不应该带/static,这是有路径自己去找就好了.我只需要写到static文件夹的父文件夹即可
location ~ /static/{
	root	/home/try/Desktop/November-December/week50/12-15/;
}
location ~(favicon.ico){
	break;
}


 location ^/try.?{
    	 autoindex on; ##显示索引
       autoindex_localtime on;   ##显示时间

      # root /home/$uri;
	return  301  /home/try;
    }





        #error_page  404              /404.html;

        # redirect server error pages to the static page /50x.html
        #
        error_page   500 502 503 504  /50x.html;
        location = /50x.html {
            root   html;
        }

        # proxy the PHP scripts to Apache listening on 127.0.0.1:80
        #
        #location ~ \.php$ {
        #    proxy_pass   http://127.0.0.1;
        #}

        # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000
        #
        #location ~ \.php$ {
        #    root           html;
        #    fastcgi_pass   127.0.0.1:9000;
        #    fastcgi_index  index.php;
        #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;
        #    include        fastcgi_params;
        #}

        # deny access to .htaccess files, if Apache's document root
        # concurs with nginx's one
        #
        #location ~ /\.ht {
        #    deny  all;
        #}
    }


    # another virtual host using mix of IP-, name-, and port-based configuration
    #
    #server {
    #    listen       8000;
    #    listen       somename:8080;
    #    server_name  somename  alias  another.alias;

    #    location / {
    #        root   html;
    #        index  index.html index.htm;
    #    }
    #}


    # HTTPS server
    #
    #server {
    #    listen       443 ssl;
    #    server_name  localhost;

    #    ssl_certificate      cert.pem;
    #    ssl_certificate_key  cert.key;

    #    ssl_session_cache    shared:SSL:1m;
    #    ssl_session_timeout  5m;

    #    ssl_ciphers  HIGH:!aNULL:!MD5;
    #    ssl_prefer_server_ciphers  on;

    #    location / {
    #        root   html;
    #        index  index.html index.htm;
    #    }
    #}

}
